#!/usr/bin/env bash

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}


# TODO consider moving to git aliases

function :push() {
    git push origin $(git rev-parse --abbrev-ref HEAD)
}

function :pull() {
    if [ -z "$1" ] ; then
        git pull origin $(git rev-parse --abbrev-ref HEAD)
    else
        git pull origin "$1"
    fi
}

function :fix () {
    commit=""
    compiledConflicts=0
    conflicts=0
    option="$1"
    branch="$2"
    regex="^(DD|AU|UD|UA|DU|AA|UU)[[:space:]]*(.+)$"

    if [[ $option == "m" ]] ; then
        if [[ $branch ]] ; then
            base=$(git rev-parse --abbrev-ref HEAD)
            commit+="Merge branch '$branch' into '$base'\nConflicts in:\n"
        else
            echo "Specify a branch"
            return 1
        fi
    fi

    git status --porcelain | {
        while read line ; do
            if [[ $line =~ $regex ]] ; then
                if [[ $line == *.min.js || $line == *.css ]] ; then
                    ((compiledConflicts+=1))
                else  
                    filename=${BASH_REMATCH[2]}
                    
                    if [[ $option == "o" ]] ; then
                        subl $filename
                    fi

                    commit+="    $filename\n"

                    ((conflicts+=1))
                fi
            fi
        done

        if [[ $conflicts > 0 ]] ; then
            if [[ $compiledConflicts > 0 ]] ; then
                commit+="    (and $compiledConflicts other compiled files)\n"
            fi
        else
            commit+="    ($compiledConflicts compiled files)\n"
        fi

        printf "\033[0;31mConflicts in:\n$commit\033[0m\n"

        if [[ $option == "m" ]] ; then
            git commit -am "$(echo -e "$commit")"
        fi
    }
}

function :td {
    ls -laR . > /dev/null
}
